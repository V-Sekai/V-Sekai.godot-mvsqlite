Import("env")
import os
import subprocess
import shutil
import platform

subprocess.run(["cargo", "build", "--release"], cwd="thirdparty/mvsqlite/mvsqlite")

# Check the platform and copy the appropriate file
if env["platform"] == "windows":
    if env["use_mingw"]:
        shutil.copy("thirdparty/mvsqlite/target/release/mvsqlite.a", "mvsqlite.windows.template_release.x86_64.a")
    else:
        shutil.copy("thirdparty/mvsqlite/target/release/mvsqlite.lib", "mvsqlite.windows.template_release.x86_64.lib")
elif env["platform"] == "linux":
    shutil.copy("thirdparty/mvsqlite/target/release/libmvsqlite.a", "mvsqlite.linux.template_release.x86_64.a")
elif env["platform"] == "macos":
    shutil.copy("thirdparty/mvsqlite/target/release/libmvsqlite.a", "mvsqlite.macos.template_release.x86_64.a")

env.Append(LIBPATH=["#modules/mvsqlite/thirdparty/mvsqlite/target/release"])
env.Append(CPPPATH=["src", "#modules/mvsqlite/src", "#modules/mvsqlite"])
env.Append(LIBPATH=["thirdparty/spmemvfs", "thirdparty/sqlite"])
env.Prepend(LIBS=["mvsqlite"])

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.Append(CPPDEFINES=[("SQLITE_ENABLE_RBU", 1)])
env_thirdparty.Append(CPPDEFINES=[("SQLITE_USE_URI", 1)])
env_thirdparty.Append(CPPDEFINES=["SQLITE_ENABLE_JSON1"])

env_thirdparty.add_source_files(env_thirdparty.modules_sources, "thirdparty/sqlite/*.c")
env_thirdparty.add_source_files(env_thirdparty.modules_sources, "thirdparty/spmemvfs/*.c")

env.add_source_files(env.modules_sources, "src/*.cpp")
env.add_source_files(env.modules_sources, "*.cpp")
